F00:0001       ; ============================================================================
F00:0002       ; Skeleton for 256b demos
F00:0003       ; ============================================================================
F00:0004       
F00:0005       .equ _DEBUG, 1		;
F00:0006       
F00:0007       .include "swis.h.asm"
F01:0001       .equ OS_WriteC, 0
F01:0002       .equ OS_WriteO, 2
F01:0003       .equ OS_NewLine, 3
F01:0004       .equ OS_Byte, 6
F01:0005       .equ XOS_Byte, OS_Byte | (1 << 17)
F01:0006       .equ OS_Word, 7
F01:0007       .equ XOS_Word, OS_Word | (1 << 17)
F01:0008       .equ OS_File, 8
F01:0009       .equ OS_Exit, 0x11
F01:0010       .equ OS_BreakPt, 0x17
F01:0011       .equ OS_ChangeDynamicArea, 0x2a
F01:0012       .equ OS_GenerateError, 0x2b
F01:0013       .equ OS_ReadEscapeState, 0x2c
F01:0014       .equ OS_ReadVduVariables, 0x31
F01:0015       .equ OS_ReadMonotonicTime, 0x42
F01:0016       .equ OS_ReadDynamicArea, 0x5c
F01:0017       .equ OS_ConvertHex2, 0xd1
F01:0018       .equ OS_ConvertHex4, 0xd2
F01:0019       .equ OS_ConvertHex8, 0xd4
F01:0020       .equ OS_ConvertCardinal1, 0xd5	
F01:0021       .equ OS_ConvertCardinal4, 0xd8
F01:0022       
F01:0023       .equ OSByte_EventEnable, 14
F01:0024       .equ OSByte_EventDisable, 13
F01:0025       .equ OSByte_Vsync, 19
F01:0026       .equ OSByte_WriteVDUBank, 112
F01:0027       .equ OSByte_WriteDisplayBank, 113
F01:0028       .equ OSByte_ReadKey, 129
F01:0029       
F01:0030       .equ OSWord_WritePalette, 12
F01:0031       
F01:0032       .equ IKey_LeftClick, 0xf6
F01:0033       .equ IKey_RightClick, 0xf4
F01:0034       .equ IKey_Space, 0x9d
F01:0035       .equ IKey_Escape, 0x8f
F01:0036       
F01:0037       .equ DynArea_Screen, 2
F01:0038       
F01:0039       .equ VD_ScreenStart, 148 
F01:0040       
F01:0041       .equ OS_Claim, 0x1f
F01:0042       .equ OS_Release, 0x20
F01:0043       .equ OS_AddToVector, 0x47
F01:0044       
F01:0045       .equ ErrorV, 0x01
F01:0046       .equ EventV, 0x10
F01:0047       .equ Event_VSync, 4
F01:0048       
F01:0049       .equ QTM_Load, 0x47E40
F01:0050       .equ QTM_Start, 0x47E41
F01:0051       .equ QTM_Stop, 0x47E42
F01:0052       .equ QTM_Pause, 0x47E43
F01:0053       .equ QTM_SetSampleSpeed, 0x47E49
F01:0054       .equ QTM_Pos, 0x47E46
F01:0055       
F00:0008       
F00:0009       .org 0x8000
F00:0010       
F00:0011       Start:
F00:0012       	; Set screen MODE
F00:0013       	mov r0, #22
               S01:00008000:  16 00 A0 E3
F00:0014       	swi OS_WriteC
               S01:00008004:  00 00 00 EF
F00:0015       	mov r0, #13
               S01:00008008:  0D 00 A0 E3
F00:0016       	swi OS_WriteC
               S01:0000800C:  00 00 00 EF
F00:0017       	mov r0, #5		; turn off cursor with VDU 5
               S01:00008010:  05 00 A0 E3
F00:0018       	swi OS_WriteC
               S01:00008014:  00 00 00 EF
F00:0019       
F00:0020       	; Get screen address
F00:0021       	adr r0, screen_addr
               S01:00008018:  58 00 8F E2
F00:0022       	mov r1, r0
               S01:0000801C:  00 10 A0 E1
F00:0023       	swi OS_ReadVduVariables
               S01:00008020:  31 00 00 EF
F00:0024       
F00:0025       	mov r8, #320
               S01:00008024:  05 8D A0 E3
F00:0026       	add r9, r8, r8, lsl #1	; 320x3
               S01:00008028:  88 90 88 E0
F00:0027       
F00:0028       main_loop:
F00:0029       	; start of screen
F00:0030       	ldr r7, screen_addr
               S01:0000802C:  44 70 9F E5
F00:0031       	; read OS timer to R0
F00:0032       	swi OS_ReadMonotonicTime
               S01:00008030:  42 00 00 EF
F00:0033       
F00:0034       	mov r2, #255	; y counter
               S01:00008034:  FF 20 A0 E3
F00:0035       y_loop:
F00:0036       	mov r1, #320	; x counter
               S01:00008038:  05 1D A0 E3
F00:0037       x_loop:
F00:0038       	; do fun stuff here!
F00:0039       
F00:0040       	.if 0			; MODE 13 diagnonal coloured dots
F00:0041       	add r3, r1, r0
F00:0042       	add r5, r2, r1
F00:0043       	eor r4, r1, r5
F00:0044       	eor r3, r3, r4
F00:0045       	str r3, [r7], #4
F00:0046       	.endif
F00:0047       
F00:0048       	.if 0			; MODE 13 sliding checkerboards
F00:0049       	add r3, r2, r0
F00:0050       	eor r3, r1, r3
F00:0051       	bic r3, r3, #63
F00:0052       	add r4, r1, r0
F00:0053       	eor r4, r4, r2
F00:0054       	bic r4, r4, #31
F00:0055       	orr r3, r3, r4, lsl#16
F00:0056       	str r3, [r7], #4
F00:0057       	.endif
F00:0058       
F00:0059       	eor r3, r1, r2
               S01:0000803C:  02 30 21 E0
F00:0060       	orr r3, r3, r3, lsl #8
               S01:00008040:  03 34 83 E1
F00:0061       	orr r3, r3, r3, lsl #16
               S01:00008044:  03 38 83 E1
F00:0062       	str r3, [r7, r8]
               S01:00008048:  08 30 87 E7
F00:0063       	str r3, [r7, r8, lsl #1]
               S01:0000804C:  88 30 87 E7
F00:0064       	str r3, [r7, r9]
               S01:00008050:  09 30 87 E7
F00:0065       	str r3, [r7], #1
               S01:00008054:  01 30 87 E4
F00:0066       
F00:0067       	subs r1, r1, #1
               S01:00008058:  01 10 51 E2
F00:0068       	bne x_loop
               S01:0000805C:  F6 FF FF 1A
F00:0069       
F00:0070       	add r7, r7, r9
               S01:00008060:  09 70 87 E0
F00:0071       
F00:0072       	subs r2, r2, #4
               S01:00008064:  04 20 52 E2
F00:0073       	bge y_loop
               S01:00008068:  F2 FF FF AA
F00:0074       
F00:0075       	.if _DEBUG
F00:0076       	swi OS_ReadEscapeState
               S01:0000806C:  2C 00 00 EF
F00:0077       	bcc main_loop
               S01:00008070:  ED FF FF 3A
F00:0078       	mov pc, lr
               S01:00008074:  0E F0 A0 E1
F00:0079       	.else
F00:0080       	b main_loop
F00:0081       	.endif
F00:0082       
F00:0083       screen_addr:
F00:0084       	.long VD_ScreenStart, -1
               S01:00008078:  94 00 00 00
               S01:0000807C:  FF FF FF FF
F00:0085       
F00:0086       .if 0
F00:0087       \\ MODE 13 diagonal coloured dots.
F00:0088       0MO.13:DIM P% 256:[.s equd148:equd-1
F00:0089       1.t adr 0,s:mov 1,0:swi &31:mov 0,#0
F00:0090       2.m ldr 7,s:mov 2, #255
F00:0091       3.y mov 1,#320
F00:0092       4.x add 3,1,0:add 5,2,1:eor 4,1,5:eor 3,3,4:str 3,[7],#4:subs 1,1,#4:bne x:subs 2,2,#1:bge y:add 0,0,#4:b m
F00:0093       5]:CALL t
F00:0094       \\ MODE 13 sliding checkerboards
F00:0095       0MO.13:DIM P% 256:[.s equd148:equd-1
F00:0096       1.t adr0,s:mov1,0:swi&31:mov0,#0
F00:0097       2.m ldr7,s:mov2,#255
F00:0098       3.y mov1,#320
F00:0099       4.x add3,2,0:eor3,1,3:bic3,3,#63:add4,1,0:eor4,4,2:bic4,4,#31:orr3,3,4,lsl#16:str3,[7],#4:subs1,1,#4:bnex:subs2,2,#1:bge
F00:0100       5]:CALL t
F00:0101       .endif
F00:0102       


Sections:
S01  seg8000


Sources:
F00  proto-256b.asm
F01  swis.h.asm


Symbols:
x_loop EXPR(32828=0x803c) ABS 
y_loop EXPR(32824=0x8038) ABS 
main_loop EXPR(32812=0x802c) ABS 
screen_addr EXPR(32888=0x8078) ABS 
Start EXPR(32768=0x8000) UNUSED ABS 
QTM_Pos EXPR(294470=0x47e46) UNUSED 
QTM_SetSampleSpeed EXPR(294473=0x47e49) UNUSED 
QTM_Pause EXPR(294467=0x47e43) UNUSED 
QTM_Stop EXPR(294466=0x47e42) UNUSED 
QTM_Start EXPR(294465=0x47e41) UNUSED 
QTM_Load EXPR(294464=0x47e40) UNUSED 
Event_VSync EXPR(4=0x4) UNUSED 
EventV EXPR(16=0x10) UNUSED 
ErrorV EXPR(1=0x1) UNUSED 
OS_AddToVector EXPR(71=0x47) UNUSED 
OS_Release EXPR(32=0x20) UNUSED 
OS_Claim EXPR(31=0x1f) UNUSED 
VD_ScreenStart EXPR(148=0x94) 
DynArea_Screen EXPR(2=0x2) UNUSED 
IKey_Escape EXPR(143=0x8f) UNUSED 
IKey_Space EXPR(157=0x9d) UNUSED 
IKey_RightClick EXPR(244=0xf4) UNUSED 
IKey_LeftClick EXPR(246=0xf6) UNUSED 
OSWord_WritePalette EXPR(12=0xc) UNUSED 
OSByte_ReadKey EXPR(129=0x81) UNUSED 
OSByte_WriteDisplayBank EXPR(113=0x71) UNUSED 
OSByte_WriteVDUBank EXPR(112=0x70) UNUSED 
OSByte_Vsync EXPR(19=0x13) UNUSED 
OSByte_EventDisable EXPR(13=0xd) UNUSED 
OSByte_EventEnable EXPR(14=0xe) UNUSED 
OS_ConvertCardinal4 EXPR(216=0xd8) UNUSED 
OS_ConvertCardinal1 EXPR(213=0xd5) UNUSED 
OS_ConvertHex8 EXPR(212=0xd4) UNUSED 
OS_ConvertHex4 EXPR(210=0xd2) UNUSED 
OS_ConvertHex2 EXPR(209=0xd1) UNUSED 
OS_ReadDynamicArea EXPR(92=0x5c) UNUSED 
OS_ReadMonotonicTime EXPR(66=0x42) 
OS_ReadVduVariables EXPR(49=0x31) 
OS_ReadEscapeState EXPR(44=0x2c) 
OS_GenerateError EXPR(43=0x2b) UNUSED 
OS_ChangeDynamicArea EXPR(42=0x2a) UNUSED 
OS_BreakPt EXPR(23=0x17) UNUSED 
OS_Exit EXPR(17=0x11) UNUSED 
OS_File EXPR(8=0x8) UNUSED 
XOS_Word EXPR(131079=0x20007) UNUSED 
OS_Word EXPR(7=0x7) 
XOS_Byte EXPR(131078=0x20006) UNUSED 
OS_Byte EXPR(6=0x6) 
OS_NewLine EXPR(3=0x3) UNUSED 
OS_WriteO EXPR(2=0x2) UNUSED 
OS_WriteC EXPR(0=0x0) 
_DEBUG EXPR(1=0x1) 
__VASM EXPR(0=0x0) INTERNAL 
__MSDOSFS EXPR(0=0x0) INTERNAL 

There have been no errors.
